---
import type {GetStaticPathsResult} from 'astro';
import {type CollectionEntry, getCollection} from 'astro:content';
import Posts from '@layouts/Posts.astro';
import PostDetails from '@layouts/PostDetails.astro';
import {SITE} from '@config';
import {getPageNumbers, getSortedPosts, slugify, getPosts} from '@utils/posts';

export const prerender = true;

export interface Props {
  post?: CollectionEntry<'blog'>;
}

export async function getStaticPaths(): Promise<GetStaticPathsResult> {
  const posts = await getPosts();

  const postResult = posts.map(
    post => ({
      params: {slug: slugify(post.data)},
      props: {post},
    }),
  );

  const pagePaths = getPageNumbers(posts.length).map(
    pageNum => ({
      params: {slug: String(pageNum)},
    }),
  );

  return [...postResult, ...pagePaths];
}

const {slug} = Astro.params;
const {post} = Astro.props;

const posts = await getCollection('blog');

const sortedPosts = getSortedPosts(posts);

const totalPages = getPageNumbers(sortedPosts.length);

const currentPage = slug != null && !Number.isNaN(Number(slug)) && totalPages.includes(Number(slug))
  ? Number(slug)
  : 0;
const lastPost = currentPage * SITE.postPerPage;
const startPost = lastPost - SITE.postPerPage;

const paginatedPosts = sortedPosts.slice(startPost, lastPost);
---

{
  post != null
    ? (
      <PostDetails post={post} />
    )
    : (
      <Posts
        posts={paginatedPosts}
        pageNum={currentPage}
        totalPages={totalPages.length}
      />
    )
}
