---
import type { Operation } from '@utils/declarativeCroct';

export interface Props {
  on: 'visible' | 'click' | 'hover' | 'load';
  operation: Operation;
  useCapture?: boolean;
  once?: boolean;
  vanish?: boolean;
  debug?: boolean;
}

const {
  on,
  operation,
  useCapture = false,
  once = false,
  vanish = false,
  debug = false,
} = Astro.props;

function flag(val: boolean): '' | undefined {
  return val ? '' : undefined;
}

const operationStr = btoa(JSON.stringify(operation));
---

<croct-tracker
  debug={flag(debug)}
  data-target-event={on}
  data-trigger-once={flag(once)}
  data-trigger-on-capture={flag(useCapture)}
  data-vanish={flag(vanish)}
  data-operation={operationStr}
>
  <slot />
</croct-tracker>

<script>
  import { croctOperate } from '@utils/declarativeCroct';

  class CroctTracker extends HTMLElement {
    private getFlag(name: string): boolean {
      const flagValue = this.getAttribute(name);
      return flagValue === '' || flagValue === 'true';
    }

    private getDataFlag(name: string): boolean {
      const flagValue = this.dataset[name];
      return flagValue === '' || flagValue === 'true';
    }

    constructor() {
      super();

      this.debug('Constructing CroctTracker');
      this.bindEvents();
    }

    private bindEvents() {
      const targetEvent = this.dataset.targetEvent;

      switch (targetEvent) {
        case 'visible':
          throw new Error('Not implemented');
        case 'click':
          this.addEventListener('click', this.doTrack.bind(this), {
            once: this.getDataFlag('triggerOnce'),
            capture: this.getDataFlag('useCapture'),
          });
          break;
        case 'hover':
          this.addEventListener('mouseover', this.doTrack.bind(this), {
            once: this.getDataFlag('triggerOnce'),
            capture: this.getDataFlag('useCapture'),
          });
          break;
        case 'load':
          document.addEventListener(
            'DOMContentLoaded',
            this.doTrack.bind(this),
            {
              once: this.getDataFlag('triggerOnce'),
              capture: this.getDataFlag('useCapture'),
            }
          );
          break;
      }
    }

    private doTrack() {
      const operationStr = this.dataset.operation;

      if (!operationStr) return;

      const operation = JSON.parse(atob(operationStr));

      this.debug('Tracking', operation);

      croctOperate(operation);

      if (this.getDataFlag('vanish')) {
        this.replaceWith(...this.childNodes);
      }
    }

    private debug(...args: unknown[]) {
      if (this.getFlag('debug')) {
        console.log(...args);
      }
    }
  }

  customElements.define('croct-tracker', CroctTracker);
</script>
