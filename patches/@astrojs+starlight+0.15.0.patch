diff --git a/node_modules/@astrojs/starlight/components/Page.astro b/node_modules/@astrojs/starlight/components/Page.astro
index 306a0ed..2bdc6ed 100644
--- a/node_modules/@astrojs/starlight/components/Page.astro
+++ b/node_modules/@astrojs/starlight/components/Page.astro
@@ -44,6 +44,7 @@ const pagefindEnabled =
 	data-has-toc={Boolean(Astro.props.toc)}
 	data-has-sidebar={Astro.props.hasSidebar}
 	data-has-hero={Boolean(Astro.props.entry.data.hero)}
+	transition:animate="initial"
 >
 	<head>
 		<Head {...Astro.props} />
@@ -87,8 +88,6 @@ const pagefindEnabled =
 					lang={Astro.props.entryMeta.lang}
 					dir={Astro.props.entryMeta.dir}
 				>
-					{/* TODO: Revisit how this logic flows. */}
-					<Banner {...Astro.props} />
 					{
 						Astro.props.entry.data.hero ? (
 							<ContentPanel {...Astro.props}>
diff --git a/node_modules/@astrojs/starlight/components/TwoColumnContent.astro b/node_modules/@astrojs/starlight/components/TwoColumnContent.astro
index 5eefb3e..be5724f 100644
--- a/node_modules/@astrojs/starlight/components/TwoColumnContent.astro
+++ b/node_modules/@astrojs/starlight/components/TwoColumnContent.astro
@@ -1,7 +1,10 @@
 ---
+import { Banner } from 'virtual:starlight/components';
 import type { Props } from '../props';
 ---
 
+{/* TODO: Revisit how this logic flows. */}
+<Banner {...Astro.props} />
 <div class="lg:sl-flex">
 	{
 		Astro.props.toc && (
@@ -32,8 +35,7 @@ import type { Props } from '../props';
 		.right-sidebar {
 			position: fixed;
 			top: 0;
-			border-inline-start: 1px solid var(--sl-color-gray-6);
-			padding-top: var(--sl-nav-height);
+			padding-top: calc(var(--sl-nav-height) * 2);
 			width: 100%;
 			height: 100vh;
 			overflow-y: auto;
@@ -42,6 +44,7 @@ import type { Props } from '../props';
 
 		.main-pane {
 			width: 100%;
+			border-inline-end: 1px solid var(--sl-color-gray-6);
 		}
 
 		:global([data-has-sidebar][data-has-toc]) .main-pane {
diff --git a/node_modules/@astrojs/starlight/package.json b/node_modules/@astrojs/starlight/package.json
index 72011b6..d8bf52b 100644
--- a/node_modules/@astrojs/starlight/package.json
+++ b/node_modules/@astrojs/starlight/package.json
@@ -155,6 +155,7 @@
       "import": "./components/Search.astro"
     },
     "./props": "./props.ts",
+    "./routes": "./routes.ts",
     "./schema": "./schema.ts",
     "./types": "./types.ts",
     "./expressive-code": "./integrations/expressive-code/exports.ts",
@@ -162,7 +163,7 @@
     "./indexSSR.astro": "./indexSSR.astro",
     "./404.astro": "./404.astro",
     "./pagefind.ts": "./pagefind.ts",
-    "./style/markdown.css": "./style/markdown.css"
+    "./style/*": "./style/*"
   },
   "peerDependencies": {
     "astro": "^4.0.0"
diff --git a/node_modules/@astrojs/starlight/routes.ts b/node_modules/@astrojs/starlight/routes.ts
new file mode 100644
index 0000000..15d954e
--- /dev/null
+++ b/node_modules/@astrojs/starlight/routes.ts
@@ -0,0 +1,3 @@
+export {routes, paths, getRouteBySlugParam, getLocaleRoutes, type Route} from './utils/routing';
+export {generateRouteData} from './utils/route-data';
+export {slugToPathname, slugToParam} from './utils/slugs';
diff --git a/node_modules/@astrojs/starlight/schema.ts b/node_modules/@astrojs/starlight/schema.ts
index a3534af..d482275 100644
--- a/node_modules/@astrojs/starlight/schema.ts
+++ b/node_modules/@astrojs/starlight/schema.ts
@@ -44,9 +44,15 @@ const StarlightFrontmatterSchema = (context: SchemaContext) =>
 		/** Display a hero section on this page. */
 		hero: HeroSchema(context).optional(),
 
+		/**
+		 * The first publication date of the current page.
+		 * Overrides the `publicationDates` global config or the date generated from the Git history.
+		 */
+		firstPublished: z.union([z.date(), z.boolean()]).optional(),
+
 		/**
 		 * The last update date of the current page.
-		 * Overrides the `lastUpdated` global config or the date generated from the Git history.
+		 * Overrides the `publicationDates` global config or the date generated from the Git history.
 		 */
 		lastUpdated: z.union([z.date(), z.boolean()]).optional(),
 
diff --git a/node_modules/@astrojs/starlight/utils/route-data.ts b/node_modules/@astrojs/starlight/utils/route-data.ts
index 484fea0..0e15992 100644
--- a/node_modules/@astrojs/starlight/utils/route-data.ts
+++ b/node_modules/@astrojs/starlight/utils/route-data.ts
@@ -6,7 +6,7 @@ import { generateToC, type TocItem } from './generateToC';
 import { getFileCommitDate } from './git';
 import { getPrevNextLinks, getSidebar, type SidebarEntry } from './navigation';
 import { ensureTrailingSlash } from './path';
-import type { Route } from './routing';
+import type { Route, StarlightDocsEntry } from './routing';
 import { localizedId } from './slugs';
 import { useTranslations } from './translations';
 
@@ -25,8 +25,6 @@ export interface StarlightRouteData extends Route {
 	pagination: ReturnType<typeof getPrevNextLinks>;
 	/** Table of contents for this page if enabled. */
 	toc: { minHeadingLevel: number; maxHeadingLevel: number; items: TocItem[] } | undefined;
-	/** JS Date object representing when this page was last updated if enabled. */
-	lastUpdated: Date | undefined;
 	/** URL object for the address where this page can be edited if enabled. */
 	editUrl: URL | undefined;
 	/** Record of UI strings localized for the current page. */
@@ -48,7 +46,6 @@ export function generateRouteData({
 		hasSidebar: entry.data.template !== 'splash',
 		pagination: getPrevNextLinks(sidebar, config.pagination, entry.data),
 		toc: getToC(props),
-		lastUpdated: getLastUpdated(props),
 		editUrl: getEditUrl(props),
 		labels: useTranslations(locale).all(),
 	};
@@ -69,20 +66,6 @@ function getToC({ entry, locale, headings }: PageProps) {
 	};
 }
 
-function getLastUpdated({ entry }: PageProps): Date | undefined {
-	if (entry.data.lastUpdated ?? config.lastUpdated) {
-		const currentFilePath = fileURLToPath(new URL('src/content/docs/' + entry.id, project.root));
-		let date = typeof entry.data.lastUpdated !== 'boolean' ? entry.data.lastUpdated : undefined;
-		if (!date) {
-			try {
-				({ date } = getFileCommitDate(currentFilePath, 'newest'));
-			} catch {}
-		}
-		return date;
-	}
-	return;
-}
-
 function getEditUrl({ entry, id, isFallback }: PageProps): URL | undefined {
 	const { editUrl } = entry.data;
 	// If frontmatter value is false, editing is disabled for this page.
diff --git a/node_modules/@astrojs/starlight/utils/routing.ts b/node_modules/@astrojs/starlight/utils/routing.ts
index 4a45cc6..d2c2c2c 100644
--- a/node_modules/@astrojs/starlight/utils/routing.ts
+++ b/node_modules/@astrojs/starlight/utils/routing.ts
@@ -1,5 +1,7 @@
 import type { GetStaticPathsItem } from 'astro';
 import { type CollectionEntry, getCollection } from 'astro:content';
+import { fileURLToPath } from 'node:url';
+import project from 'virtual:starlight/project-context';
 import config from 'virtual:starlight/user-config';
 import {
 	type LocaleData,
@@ -8,6 +10,7 @@ import {
 	slugToLocaleData,
 	slugToParam,
 } from './slugs';
+import { getFileCommitDate } from './git';
 import { validateLogoImports } from './validateLogoImports';
 
 // Validate any user-provided logos imported correctly.
@@ -27,6 +30,10 @@ export interface Route extends LocaleData {
 	slug: string;
 	/** The unique ID for this page. */
 	id: string;
+	/** JS Date object representing when this page was last updated if enabled. */
+	lastUpdated: Date | undefined;
+	/** JS Date object representing when this page was first published if enabled. */
+	firstPublished: Date | undefined;
 	/** True if this page is untranslated in the current language and using fallback content from the default locale. */
 	isFallback?: true;
 	[key: string]: unknown;
@@ -46,11 +53,12 @@ const normalizeIndexSlug = (slug: string) => (slug === 'index' ? '' : slug);
 
 /** All entries in the docs content collection. */
 const docs: StarlightDocsEntry[] = ((await getCollection('docs')) ?? []).map(
-	({ slug, ...entry }) => ({
+	({ slug, ...entry }): StarlightDocsEntry => ({
 		...entry,
 		slug: normalizeIndexSlug(slug),
 	})
-);
+)
+	.map(entry => ({...entry, ...getEntryDates(entry)}));
 
 function getRoutes(): Route[] {
 	const routes: Route[] = docs.map((entry) => ({
@@ -59,6 +67,8 @@ function getRoutes(): Route[] {
 		id: entry.id,
 		entryMeta: slugToLocaleData(entry.slug),
 		...slugToLocaleData(entry.slug),
+		firstPublished: entry.firstPublished,
+		lastUpdated: entry.lastUpdated,
 	}));
 
 	// In multilingual sites, add required fallback routes.
@@ -87,6 +97,8 @@ function getRoutes(): Route[] {
 					locale,
 					dir: localeConfig.dir,
 					entryMeta: slugToLocaleData(fallback.slug),
+					firstPublished: fallback.firstPublished,
+					lastUpdated: fallback.lastUpdated,
 				});
 			}
 		}
@@ -150,3 +162,41 @@ function filterByLocale<T extends { slug: string }>(items: T[], locale: string |
 	}
 	return items;
 }
+
+type EntryDates = {
+	firstPublished: Date | undefined,
+	lastUpdated: Date | undefined,
+};
+
+export function getEntryDates(entry: StarlightDocsEntry): EntryDates {
+	const dates: EntryDates = {
+		firstPublished: undefined,
+		lastUpdated: undefined,
+	};
+
+	if (entry.data.lastUpdated ?? config.publicationDates) {
+		const currentFilePath = fileURLToPath(new URL('src/content/docs/' + entry.id, project.root));
+		if (entry.data.lastUpdated instanceof Date) {
+			dates.lastUpdated = entry.data.lastUpdated;
+		} else {
+			try {
+				const { date } = getFileCommitDate(currentFilePath, 'newest');
+				dates.lastUpdated = date;
+			} catch {}
+		}
+	}
+
+	if (entry.data.firstPublished ?? config.publicationDates) {
+		const currentFilePath = fileURLToPath(new URL('src/content/docs/' + entry.id, project.root));
+		if (entry.data.firstPublished instanceof Date) {
+			dates.firstPublished = entry.data.firstPublished;
+		} else {
+			try {
+				const { date } = getFileCommitDate(currentFilePath, 'oldest');
+				dates.firstPublished = date;
+			} catch {}
+		}
+	}
+
+	return dates;
+}
diff --git a/node_modules/@astrojs/starlight/utils/user-config.ts b/node_modules/@astrojs/starlight/utils/user-config.ts
index ef7f321..ac30d9a 100644
--- a/node_modules/@astrojs/starlight/utils/user-config.ts
+++ b/node_modules/@astrojs/starlight/utils/user-config.ts
@@ -169,11 +169,11 @@ const UserConfigSchema = z.object({
 	 */
 	customCss: z.string().array().optional().default([]),
 
-	/** Define if the last update date should be visible in the page footer. */
-	lastUpdated: z
+	/** Define if the publication date and last update date should be visible in the page footer. */
+	publicationDates: z
 		.boolean()
 		.default(false)
-		.describe('Define if the last update date should be visible in the page footer.'),
+		.describe('Define if the publication date and last update date should be visible in the page footer.'),
 
 	/** Define if the previous and next page links should be visible in the page footer. */
 	pagination: z
