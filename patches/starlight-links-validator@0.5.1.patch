diff --git a/index.ts b/index.ts
index aa31ef250adbca426655bf6dd8956b60f81b1d62..34b96c77271372a7a0e8b93636ba1c956bf2d106 100644
--- a/index.ts
+++ b/index.ts
@@ -1,9 +1,9 @@
-import type { StarlightPlugin } from '@astrojs/starlight/types'
-import { AstroError } from 'astro/errors'
-import { z } from 'astro/zod'
+import type { StarlightPlugin } from '@astrojs/starlight/types';
+import { AstroError } from 'astro/errors';
+import { z } from 'astro/zod';
 
-import { remarkStarlightLinksValidator } from './libs/remark'
-import { logErrors, validateLinks } from './libs/validation'
+import { remarkStarlightLinksValidator, setRootCollection } from './libs/remark';
+import { logErrors, validateLinks } from './libs/validation';
 
 const starlightLinksValidatorOptionsSchema = z
   .object({
@@ -57,6 +57,12 @@ export default function starlightLinksValidatorPlugin(
                 return
               }
 
+              const rootCollection = starlightConfig.collectionNames?.[0];
+
+              if (rootCollection) {
+                setRootCollection(rootCollection)
+              }
+
               updateConfig({
                 markdown: {
                   remarkPlugins: [[remarkStarlightLinksValidator, astroConfig.base]],
diff --git a/libs/remark.ts b/libs/remark.ts
index 60648f9788ed46bcafa97883e28eca32611b7a67..dc09bd23f5fcdb0bcc922c8260b35e79c7cfad22 100644
--- a/libs/remark.ts
+++ b/libs/remark.ts
@@ -1,18 +1,18 @@
-import 'mdast-util-mdx-jsx'
+import 'mdast-util-mdx-jsx';
 
-import nodePath from 'node:path'
+import GitHubSlugger, { slug } from 'github-slugger';
+import type { Nodes } from 'hast';
+import { fromHtml } from 'hast-util-from-html';
+import { hasProperty } from 'hast-util-has-property';
+import type { Root } from 'mdast';
+import type { MdxJsxAttribute, MdxJsxExpressionAttribute } from 'mdast-util-mdx-jsx';
+import { toString } from 'mdast-util-to-string';
 
-import GitHubSlugger, { slug } from 'github-slugger'
-import type { Nodes } from 'hast'
-import { fromHtml } from 'hast-util-from-html'
-import { hasProperty } from 'hast-util-has-property'
-import type { Root } from 'mdast'
-import type { MdxJsxAttribute, MdxJsxExpressionAttribute } from 'mdast-util-mdx-jsx'
-import { toString } from 'mdast-util-to-string'
-import type { Plugin } from 'unified'
-import { visit } from 'unist-util-visit'
+import nodePath from 'node:path';
+import type { Plugin } from 'unified';
+import { visit } from 'unist-util-visit';
 
-import { stripLeadingSlash } from './path'
+import { stripLeadingSlash } from './path';
 
 // All the headings keyed by file path.
 const headings: Headings = new Map()
@@ -136,19 +136,30 @@ function isInternalLink(link: string) {
   return nodePath.isAbsolute(link) || link.startsWith('#') || link.startsWith('.')
 }
 
+let rootCollection: string = 'docs';
+
+export function setRootCollection(collection: string) {
+  rootCollection = collection;
+}
+
 function normalizeFilePath(base: string, filePath?: string) {
   if (!filePath) {
     throw new Error('Missing file path to validate links.')
   }
 
-  const path = nodePath
-    .relative(nodePath.join(process.cwd(), 'src/content/docs'), filePath)
+  const pathSegments = nodePath
+    .relative(nodePath.join(process.cwd(), 'src/content'), filePath)
     .replace(/\.\w+$/, '')
     .replace(/index$/, '')
     .replace(/[/\\]?$/, '/')
     .split(/[/\\]/)
-    .map((segment) => slug(segment))
-    .join('/')
+    .map((segment) => slug(segment));
+
+  const path = (
+    pathSegments[0] === rootCollection
+      ? pathSegments.slice(1)
+      : pathSegments
+  ).join('/');
 
   if (base !== '/') {
     return nodePath.posix.join(stripLeadingSlash(base), path)
